{"version":3,"sources":["App.tsx","GoodItem.tsx","GoodList.tsx","index.tsx"],"names":["SortType","GoodItem","good","GoodList","goods","map","goodsFromServer","App","useState","SORT_FIELD_RESET","sortField","setSortField","reverse","setReverse","readyGoods","preparedGoods","sort","good1","good2","SORT_FIELD_ALPHABET","localeCompare","SORT_FIELD_BY_LENGTH","getPreparedGoods","className","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0ECZQC,EACX,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,oBAAI,UAAQ,OAAZ,SAAoBA,KCAvBC,EAA2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtC,6BACGA,EAAMC,KAAI,SAACH,GAAD,OACT,cAAC,EAAD,CAAUA,KAAMA,GAAWA,SFJpBI,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAEGN,K,+BAAAA,E,8BAAAA,E,qBAAAA,M,KA8BE,IAAMO,EAAM,WACjB,MACEC,mBAAmBR,EAASS,kBAD9B,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACMC,EA5BR,SAA0BV,EAAgBM,EAAoBE,GAC5D,IAAMG,EAAa,YAAOX,GAoB1B,OAlBIM,GACFK,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKV,EAASmB,oBACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKlB,EAASqB,qBACZ,OAAOJ,EAAMP,GAAaQ,EAAMR,GAClC,QACE,OAAO,MAKXE,GACFG,EAAcH,UAGTG,EAOYO,CAAiBhB,EAAiBI,EAAWE,GAEhE,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYf,IAAcV,EAASmB,sBAErCO,QAAS,WACPf,EAAaX,EAASmB,sBAN1B,iCAYA,wBACEK,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYf,IAAcV,EAASqB,uBAErCK,QAAS,WACPf,EAAaX,EAASqB,uBAN1B,4BAYA,wBACEG,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAab,IAEfc,QAAS,WACPb,GAAYD,IANhB,sBAYgB,KAAdF,GAAoBE,IACpB,wBACEY,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPf,EAAaX,EAASS,kBACtBI,GAAW,IALf,sBAYJ,cAAC,EAAD,CAAUT,MAAOU,QGvGvBa,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b3fe83cd.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { useState } from 'react';\nimport { GoodList } from './GoodList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\nenum SortType {\n  SORT_FIELD_ALPHABET = 'alphabet',\n  SORT_FIELD_BY_LENGTH = 'length',\n  SORT_FIELD_RESET = '',\n}\n\nfunction getPreparedGoods(goods:string[], sortField:SortType, reverse:boolean) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortType.SORT_FIELD_BY_LENGTH:\n          return good1[sortField] - good2[sortField];\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField]\n  = useState<SortType>(SortType.SORT_FIELD_RESET);\n  const [reverse, setReverse] = useState(false);\n  const readyGoods = getPreparedGoods(goodsFromServer, sortField, reverse);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortType.SORT_FIELD_ALPHABET,\n          })}\n          onClick={() => {\n            setSortField(SortType.SORT_FIELD_ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortType.SORT_FIELD_BY_LENGTH,\n          })}\n          onClick={() => {\n            setSortField(SortType.SORT_FIELD_BY_LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !reverse,\n          })}\n          onClick={() => {\n            setReverse(!reverse);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(sortField !== '' || reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField(SortType.SORT_FIELD_RESET);\n              setReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <GoodList goods={readyGoods} />\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  good:string\n};\n\nexport const GoodItem:React.FC<Props>\n= ({ good }) => <li data-cy=\"Good\">{good}</li>;\n","import React from 'react';\nimport { GoodItem } from './GoodItem';\n\ntype Props = {\n  goods:string[]\n};\n\nexport const GoodList:React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map((good) => (\n      <GoodItem good={good} key={good} />\n    ))}\n  </ul>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}